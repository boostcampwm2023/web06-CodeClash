# main branch에 push, pull request가 발생할 때 실행
on:
  pull_request:
    branches:
      - scoring-server-main

env:
  # 도커 레지스트리 및 이미지 정보, 컨테이너 이름
  REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ secrets.GIT_ID }}/scoring-server
  DOCKER_CONTAINER: scoring-server

jobs:
  # # 테스트 코드 실행
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Use Node.js 18.x
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18.x

  #     - name: npm install
  #       run: npm install

  #     - name: npm test
  #       run: npm test

  #     - name: npm run build
  #       run: npm run build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up docker build
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login To ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GIT_ID }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest

  # 도커 이미지 빌드 성공시, 서버에 배포
  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: checkout source code
        uses: actions/checkout@v2

      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.SCORING_PORT }}
          password: ${{ secrets.SCORING_PASSWORD }}
          script: |
            docker rmi ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest || true

            docker stop ${{ env.DOCKER_CONTAINER }}_1|| true
            docker rm ${{ env.DOCKER_CONTAINER }}_1 || true

            docker stop ${{ env.DOCKER_CONTAINER }}_2 || true
            docker rm ${{ env.DOCKER_CONTAINER }}_2 || true

            docker stop ${{ env.DOCKER_CONTAINER }}_3 || true
            docker rm ${{ env.DOCKER_CONTAINER }}_3 || true

            # scoring server 1
            docker run -d \
              -p 3000:3000 \
              --name ${{ env.DOCKER_CONTAINER }}_1 \
              --restart=always \
              ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest

            # scoring server 2
            docker run -d \
              -p 3001:3000 \
              --name ${{ env.DOCKER_CONTAINER }}_2 \
              --restart=always \
              ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest

            # scoring server 3
            docker run -d \
              -p 3002:3000 \
              --name ${{ env.DOCKER_CONTAINER }}_3 \
              --restart=always \
              ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
