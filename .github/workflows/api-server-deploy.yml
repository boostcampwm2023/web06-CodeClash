# main branch에 push, pull request가 발생할 때 실행
on:
  pull_request:
    branches:
      - main
    paths:
      - "api-server/**"

env:
  # 도커 레지스트리 및 이미지 정보, 컨테이너 이름
  REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ secrets.GIT_ID }}/api-server
  DOCKER_CONTAINER: api-server

jobs:
  # 테스트 코드 실행
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: npm install, test, build
        run: |
          cd api-server 
          npm install
          npm test
          npm run build

  # 테스트 및 빌드 성공시 도커 이미지 빌드
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up docker build
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login To ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GIT_ID }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
          context: ./api-server

  # 도커 이미지 빌드 성공시, 서버에 배포
  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: checkout source code
        uses: actions/checkout@v2

      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.REMOTE_PORT }}
          password: ${{ secrets.REMOTE_PASSWORD }}
          script: |
            docker stop ${{ env.DOCKER_CONTAINER }} || true
            docker rm ${{ env.DOCKER_CONTAINER }} || true
            docker rmi ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest || true

            docker login ${{ env.REGISTRY }} -u ${{ secrets.GIT_ID }} -p ${{ secrets.GIT_TOKEN }}
            docker pull ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
            docker run -d \
              --env-file /root/.env.production \
              -p 3000:3000 \
              --name ${{ env.DOCKER_CONTAINER }} \
              --restart=always \
              --add-host host.docker.internal:host-gateway \
              ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
